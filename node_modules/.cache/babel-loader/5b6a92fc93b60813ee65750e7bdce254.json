{"ast":null,"code":"var _jsxFileName = \"/home/andre/baraxolka/src/main/sidebar/index/socket.jsx\";\nimport React from 'react';\nimport MySelect from './mySelect';\nimport goods from '../../../db/goods';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Socket = _ref => {\n  let {\n    category,\n    socket,\n    onSelect\n  } = _ref;\n  const goodList = goods.filter(good => good['Количество'] !== '0');\n  const sockets = ['478', '775', '1156', '1155', '1150', '1151', '462', 'AM2', 'AM2+', 'AM3', 'AM3+', 'AM4'];\n  let arr = []; // список имеющихся сокетов\n\n  goodList.forEach(good => {\n    if (good['Артикул'][0] === category) {\n      if (category === '0' || category === '1' || category === '7' || category === '8') {\n        if (!arr.includes(good['Сокет'])) {\n          arr.push(good['Сокет']);\n        }\n      } else {\n        if (good['Сокет']) {\n          if (good['Сокет'].includes(',')) {\n            let arrSockets = good['Сокет'].split(',');\n            arrSockets = arrSockets.map(item => item.trim());\n            arrSockets.forEach(item => {\n              if (!arr.includes(item)) {\n                arr.push(item);\n              }\n            });\n          } else {\n            if (!arr.includes(good['Сокет'])) {\n              arr.push(good['Сокет']);\n            }\n          }\n        }\n      }\n    }\n  });\n  let variants = ['Все']; // имеющиеся сокеты в нужном порядке\n\n  sockets.forEach(item => {\n    if (arr.includes(item)) {\n      variants.push(item);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(MySelect, {\n    title: 'Сокет',\n    variants: variants,\n    variant: socket,\n    onSelect: onSelect\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n};\n\n_c = Socket;\nexport default Socket;\n\nvar _c;\n\n$RefreshReg$(_c, \"Socket\");","map":{"version":3,"sources":["/home/andre/baraxolka/src/main/sidebar/index/socket.jsx"],"names":["React","MySelect","goods","Socket","category","socket","onSelect","goodList","filter","good","sockets","arr","forEach","includes","push","arrSockets","split","map","item","trim","variants"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;;AAGA,MAAMC,MAAM,GAAG,QAAoC;AAAA,MAAnC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAAmC;AAC/C,QAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAAC,YAAD,CAAJ,KAAuB,GAA5C,CAAjB;AACA,QAAMC,OAAO,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,MAAvB,EAA+B,MAA/B,EAAuC,MAAvC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,MAA7D,EAAqE,KAArE,EAA4E,MAA5E,EAAoF,KAApF,CAAhB;AAEA,MAAIC,GAAG,GAAG,EAAV,CAJ+C,CAIjC;;AAEdJ,EAAAA,QAAQ,CAACK,OAAT,CAAiBH,IAAI,IAAI;AACrB,QAAGA,IAAI,CAAC,SAAD,CAAJ,CAAgB,CAAhB,MAAuBL,QAA1B,EAAoC;AAChC,UAAGA,QAAQ,KAAK,GAAb,IAAoBA,QAAQ,KAAK,GAAjC,IAAwCA,QAAQ,KAAK,GAArD,IAA4DA,QAAQ,KAAK,GAA5E,EAAiF;AAC7E,YAAG,CAACO,GAAG,CAACE,QAAJ,CAAaJ,IAAI,CAAC,OAAD,CAAjB,CAAJ,EAAiC;AAC7BE,UAAAA,GAAG,CAACG,IAAJ,CAASL,IAAI,CAAC,OAAD,CAAb;AACH;AACJ,OAJD,MAKK;AACD,YAAGA,IAAI,CAAC,OAAD,CAAP,EAAkB;AACd,cAAGA,IAAI,CAAC,OAAD,CAAJ,CAAcI,QAAd,CAAuB,GAAvB,CAAH,EAAgC;AAC5B,gBAAIE,UAAU,GAAGN,IAAI,CAAC,OAAD,CAAJ,CAAcO,KAAd,CAAoB,GAApB,CAAjB;AACAD,YAAAA,UAAU,GAAGA,UAAU,CAACE,GAAX,CAAeC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAAvB,CAAb;AACAJ,YAAAA,UAAU,CAACH,OAAX,CAAmBM,IAAI,IAAI;AACvB,kBAAG,CAACP,GAAG,CAACE,QAAJ,CAAaK,IAAb,CAAJ,EAAwB;AACpBP,gBAAAA,GAAG,CAACG,IAAJ,CAASI,IAAT;AACH;AACJ,aAJD;AAKH,WARD,MASK;AACD,gBAAG,CAACP,GAAG,CAACE,QAAJ,CAAaJ,IAAI,CAAC,OAAD,CAAjB,CAAJ,EAAiC;AAC7BE,cAAAA,GAAG,CAACG,IAAJ,CAASL,IAAI,CAAC,OAAD,CAAb;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,GA1BD;AA4BA,MAAIW,QAAQ,GAAG,CAAC,KAAD,CAAf,CAlC+C,CAkCvB;;AACxBV,EAAAA,OAAO,CAACE,OAAR,CAAgBM,IAAI,IAAI;AACpB,QAAGP,GAAG,CAACE,QAAJ,CAAaK,IAAb,CAAH,EAAuB;AACnBE,MAAAA,QAAQ,CAACN,IAAT,CAAcI,IAAd;AACH;AACJ,GAJD;AAMA,sBAAO,QAAC,QAAD;AAAU,IAAA,KAAK,EAAE,OAAjB;AAA0B,IAAA,QAAQ,EAAEE,QAApC;AAA8C,IAAA,OAAO,EAAEf,MAAvD;AAA+D,IAAA,QAAQ,EAAEC;AAAzE;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA1CD;;KAAMH,M;AA4CN,eAAeA,MAAf","sourcesContent":["import React from 'react'\nimport MySelect from './mySelect'\nimport goods from '../../../db/goods'\n\n\nconst Socket = ({ category, socket, onSelect }) => {\n    const goodList = goods.filter(good => good['Количество'] !== '0')\n    const sockets = ['478', '775', '1156', '1155', '1150', '1151', '462', 'AM2', 'AM2+', 'AM3', 'AM3+', 'AM4']\n\n    let arr = []  // список имеющихся сокетов\n\n    goodList.forEach(good => {\n        if(good['Артикул'][0] === category) {\n            if(category === '0' || category === '1' || category === '7' || category === '8') {\n                if(!arr.includes(good['Сокет'])) {\n                    arr.push(good['Сокет'])\n                }\n            }\n            else {\n                if(good['Сокет']) {\n                    if(good['Сокет'].includes(',')) {\n                        let arrSockets = good['Сокет'].split(',')\n                        arrSockets = arrSockets.map(item => item.trim())\n                        arrSockets.forEach(item => {\n                            if(!arr.includes(item)) {\n                                arr.push(item)\n                            }\n                        })\n                    }\n                    else {\n                        if(!arr.includes(good['Сокет'])) {\n                            arr.push(good['Сокет'])\n                        }\n                    }\n                }\n            }\n        }\n    })\n\n    let variants = ['Все']  // имеющиеся сокеты в нужном порядке\n    sockets.forEach(item => {\n        if(arr.includes(item)) {\n            variants.push(item)\n        }\n    })\n\n    return <MySelect title={'Сокет'} variants={variants} variant={socket} onSelect={onSelect} />\n}\n\nexport default Socket\n"]},"metadata":{},"sourceType":"module"}